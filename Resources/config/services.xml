<?xml version="1.0" ?>
<!--

    Copyright (c) 2014 Eltrino LLC (http://eltrino.com)

    Licensed under the Open Software License (OSL 3.0).
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://opensource.org/licenses/osl-3.0.php

    If you did not receive a copy of the license and are unable to
    obtain it through the world-wide-web, please send an email
    to license@eltrino.com so we can send you a copy immediately.

-->
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="diamante.api.user.entity.class">Diamante\ApiBundle\Entity\ApiUser</parameter>
        <parameter key="diamante.api.routing.rest_service_loader.class">Diamante\ApiBundle\Routing\RestServiceLoader</parameter>
        <parameter key="diamante.api.event_listener.handle_request.class">Diamante\ApiBundle\EventListener\HandleRequest</parameter>
        <parameter key="diamante.api.event_listener.handle_view.class">Diamante\ApiBundle\EventListener\HandleView</parameter>
        <parameter key="diamante.api.event_listener.handle_exception.class">Diamante\ApiBundle\EventListener\HandleException</parameter>
        <parameter key="diamante.api.user.security.provider.class">Diamante\ApiBundle\Security\ApiUserProvider</parameter>
        <parameter key="diamante.api.user.repository.class">Diamante\ApiBundle\Infrastructure\Persistence\DoctrineApiUserRepository</parameter>
    </parameters>

    <services>
        <service id="diamante.api.routing.rest_service_loader" class="%diamante.api.routing.rest_service_loader.class%">
            <argument type="service" id="service_container"/>
            <argument type="service" id="annotation_reader"/>
            <tag name="routing.loader" />
        </service>

        <service id="diamante.api.user.security.provider" class="%diamante.api.user.security.provider.class%">
            <argument type="service" id="diamante.api.user.repository" />
        </service>

        <service id="wsse.security.authentication.provider"
                 class="Diamante\ApiBundle\Security\Authentication\Provider\WsseProvider" public="false">
            <argument /> <!-- User Provider -->
            <argument>%kernel.cache_dir%/security/nonces</argument>
        </service>

        <service id="wsse.security.authentication.listener"
                 class="Diamante\ApiBundle\Security\Firewall\WsseListener" public="false">
            <argument type="service" id="security.context"/>
            <argument type="service" id="security.authentication.manager" />
        </service>

        <service id="diamante.api.user.repository" class="%diamante.api.user.repository.class%"
                 factory-service = "doctrine.orm.entity_manager"
                 factory-method  = "getRepository">
            <argument type="string">%diamante.api.user.entity.class%</argument>
        </service>

        <service id="diamante.api.event_listener.handle_request" class="%diamante.api.event_listener.handle_request.class%">
            <argument type="service" id="validator"/>
            <tag name="kernel.event_listener" event="kernel.controller" method="onKernelController" />
        </service>

        <service id="diamante.api.event_listener.handle_view" class="%diamante.api.event_listener.handle_view.class%">
            <argument type="service" id="jms_serializer"/>
            <tag name="kernel.event_listener" event="kernel.view" method="onKernelView" />
        </service>

        <service id="diamante.api.event_listener.handle_exception" class="%diamante.api.event_listener.handle_exception.class%">
            <argument type="service" id="jms_serializer"/>
            <tag name="kernel.event_listener" event="kernel.exception" method="onKernelException" />
        </service>

    </services>
</container>
